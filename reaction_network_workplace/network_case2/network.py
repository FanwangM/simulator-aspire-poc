from __future__ import annotations

import os.path
import random

from loguru import logger

from reaction_network.schema import NetworkLv0, NetworkLv1, Operation, BENCH_TOP_LV2
from reaction_network.utils import json_dump, FilePath, json_load


def step00_create_scraper_input(routes_file: FilePath = "../data/case0/routes.json"):
    """
    collect more info based on Jenna's data
    this produces the input for ChemScraper
    skip this if you are fine with made up physical properties
    """
    nw = NetworkLv0.from_routes(routes_file, seed=2, n_target=None, scraper_output=None)
    json_dump(nw.unique_molecular_smis, "step00_scraper_input.json")


def step01_export_network0(
        routes_file: FilePath = "../data/case0/routes.json",
        n_target=5, network0_seed=2, scraper_output: FilePath | None = "step00_scraper_output.json"
):
    """
    LV0. given the routes selection seed, scraper_input, and scraper_output
    note: this script needs `scraper_output.json` generated by `ChemScraper` using `scraper_input.json`
    """
    if not os.path.isfile(scraper_output):
        logger.warning(f"cannot find {scraper_output}, use made up physical properties")
        scraper_output = None
    network = NetworkLv0.from_routes(
        routes_file=routes_file, seed=network0_seed, n_target=n_target, scraper_output=scraper_output
    )
    json_dump(network.model_dump(), "step01_network_lv0.json")


def step02_export_network1():
    """
    define a reaction network

    LV0. given the routes selection seed, scraper_input, and scraper_output
    LV1. given the target product amounts, and expected yields
    """
    network_lv0 = json_load("step01_network_lv0.json")
    network_lv0 = NetworkLv0(**network_lv0)

    random.seed(42)
    target_masses = {smi: random.uniform(0.3, 0.5) for smi in network_lv0.target_smis}
    expected_yields = {smi: random.uniform(0.7, 1) for smi in network_lv0.reaction_dict}

    network_lv1 = NetworkLv1.from_target_masses_and_expected_yields(
        target_masses=target_masses,
        expected_yields=expected_yields,
        network_lv0=network_lv0
    )
    for r in network_lv1.reactions:
        logger.info(f"REACTION: {r.reaction_lv0.reaction_smiles}")
        logger.info(f"volume sum of the reaction mixture: {r.volume_sum}")
        logger.info(f"the solvent is identified as: {r.solvent_smi}")
        logger.info(f"this is a reaction that makes a target: {r.product.compound_lv0.smiles in target_masses}\n")
    json_dump(network_lv1.model_dump(), "step02_network_lv1.json")


def step03_export_benchtop2():
    network_lv1 = json_load("step02_network_lv1.json")
    Operation.build_transforms_from_network(NetworkLv1(**network_lv1))
    BENCH_TOP_LV2.add_operation_can_be_realized_by()
    json_dump(BENCH_TOP_LV2.model_dump(), "step03_bench_top_lv2.json")


def main_network(routes_file: FilePath, n_target: int):
    step01_export_network0(routes_file, n_target, network0_seed=2)
    step02_export_network1()
    step03_export_benchtop2()


if __name__ == '__main__':
    # step00_create_scraper_input("../data/case0/routes.json")  # run this for scarping physical properties
    main_network(routes_file="../data/case2_compounds/100_1_1/routes.json", n_target=20)
